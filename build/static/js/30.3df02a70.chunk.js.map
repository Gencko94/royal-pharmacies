{"version":3,"sources":["pages/SingleBrandMobile.js"],"names":["SingleBrandMobile","userId","useContext","AuthProvider","CartAndWishlistProvider","cartItems","guestCartItems","useIntl","formatMessage","locale","slug","useParams","React","DataProvider","deliveryCountriesLoading","deliveryCountriesIdle","settings","mobileCartPopupOpen","sideMenuOpen","useState","cartMenuOpen","setCartMenuOpen","isTabletOrAbove","useMediaQuery","query","useInfiniteQuery","number","pageParam","getSingleBrandProducts","retry","getNextPageParam","lastPage","currentPage","pageCount","data","productsLoading","isLoading","hasNextPage","fetchNextPage","isFetchingNextPage","console","log","className","style","minHeight","map","i","pages","brandName","name","store_name_en","content","id","property","div","initial","opacity","animate","exit","onClick","src","process","brandLogo","alt","maxHeight","width","group","Fragment","products","item","type","Object","keys","new_variation_addons","length","color","height","visible","checkShowCondition"],"mappings":"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","file":"static/js/30.3df02a70.chunk.js","sourcesContent":["import { AnimatePresence, motion } from 'framer-motion';\r\nimport React, { useContext } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useIntl } from 'react-intl';\r\nimport { useInfiniteQuery } from 'react-query';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { useParams } from 'react-router-dom';\r\nimport { scrollTo } from 'scroll-js';\r\nimport CategoryItemLoader from '../components/Category/CategoryItemLoader';\r\nimport CategoryProductItem from '../components/Category/CategoryProductItem';\r\nimport VariantCategoryProductItem from '../components/Category/VariantCategoryProductItem';\r\nimport Layout from '../components/Layout';\r\nimport MobileCartPopup from '../components/MobileCartPopup/MobileCartPopup';\r\nimport { AuthProvider } from '../contexts/AuthContext';\r\nimport { CartAndWishlistProvider } from '../contexts/CartAndWishlistContext';\r\nimport { DataProvider } from '../contexts/DataContext';\r\nimport { getSingleBrandProducts } from '../Queries/Queries';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function SingleBrandMobile() {\r\n  const { userId } = useContext(AuthProvider);\r\n  const { cartItems, guestCartItems } = useContext(CartAndWishlistProvider);\r\n  const { formatMessage, locale } = useIntl();\r\n  const { slug } = useParams();\r\n  const {\r\n    deliveryCountriesLoading,\r\n    deliveryCountriesIdle,\r\n    settings,\r\n    mobileCartPopupOpen,\r\n    sideMenuOpen,\r\n  } = React.useContext(DataProvider);\r\n  const [cartMenuOpen, setCartMenuOpen] = React.useState(false);\r\n  const isTabletOrAbove = useMediaQuery({ query: '(min-width:768px)' });\r\n\r\n  const checkShowCondition = () => {\r\n    if (isTabletOrAbove) return false;\r\n    if (sideMenuOpen) return false;\r\n    if (userId) {\r\n      if (cartItems?.length > 0) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (guestCartItems?.length > 0) {\r\n        return true;\r\n      } else if (mobileCartPopupOpen) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const {\r\n    data,\r\n    isLoading: productsLoading,\r\n    hasNextPage,\r\n    fetchNextPage,\r\n    isFetchingNextPage,\r\n  } = useInfiniteQuery(\r\n    ['single-brand', { slug, number: 42 }],\r\n    ({ pageParam }) => getSingleBrandProducts({ slug, number: 42, pageParam }),\r\n    {\r\n      retry: true,\r\n\r\n      getNextPageParam: lastPage => {\r\n        if (lastPage.currentPage < lastPage.pageCount) {\r\n          return lastPage.currentPage + 1;\r\n        } else {\r\n          return undefined;\r\n        }\r\n      },\r\n    }\r\n  );\r\n  console.log(hasNextPage);\r\n  if (productsLoading || deliveryCountriesLoading || deliveryCountriesIdle) {\r\n    return (\r\n      <div\r\n        key=\"loader\"\r\n        className=\"brand-grid__mobile py-2\"\r\n        style={{ minHeight: 'calc(100vh - 150px)' }}\r\n      >\r\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(i => {\r\n          return <CategoryItemLoader key={i} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"min-h-screen p-3\">\r\n        <Helmet>\r\n          <title>\r\n            {data\r\n              ? `${data.pages[0].brandName[locale].name}`\r\n              : settings?.store_name_en}\r\n          </title>\r\n          <meta\r\n            name=\"description\"\r\n            content={\r\n              data\r\n                ? `${formatMessage({ id: 'shop' })} ${\r\n                    data.pages[0]?.brandName?.[locale].name\r\n                  }`\r\n                : settings?.store_name_en\r\n            }\r\n          />\r\n          <meta\r\n            property=\"og:title\"\r\n            content={\r\n              data\r\n                ? `${data.pages[0].brandName[locale].name} }`\r\n                : settings?.store_name_en\r\n            }\r\n          />\r\n          <meta\r\n            property=\"og:description\"\r\n            content={\r\n              data\r\n                ? `${formatMessage({ id: 'shop' })} ${\r\n                    data.pages[0]?.brandName?.[locale].name\r\n                  }`\r\n                : settings?.store_name_en\r\n            }\r\n          />\r\n        </Helmet>\r\n        <AnimatePresence>\r\n          {cartMenuOpen && (\r\n            <motion.div\r\n              key=\"sidecart-bg\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 0.5 }}\r\n              exit={{ opacity: 0 }}\r\n              onClick={() => setCartMenuOpen(false)}\r\n              className=\"side__addCart-bg\"\r\n            ></motion.div>\r\n          )}\r\n\r\n          {!productsLoading && (\r\n            <div\r\n              key=\"header\"\r\n              className=\"flex justify-center flex-col items-center\"\r\n            >\r\n              <h1 className=\"font-bold text-xl mb-3\">\r\n                {formatMessage({ id: 'shop-brands' })}{' '}\r\n                {data?.pages[0].brandName?.[locale].name}\r\n              </h1>\r\n              <img\r\n                src={`${process.env.REACT_APP_IMAGES_URL}/original/${data?.pages[0].brandLogo}`}\r\n                alt={data?.pages[0].brandName?.[locale].name}\r\n                style={{ maxHeight: '150px', width: 'auto' }}\r\n              />\r\n            </div>\r\n          )}\r\n          <div\r\n            key=\"items\"\r\n            className=\"brand-grid__mobile py-2 min-h-full\"\r\n            style={{ minHeight: 'calc(100vh - 150px)' }}\r\n          >\r\n            {data?.pages.map((group, i) => {\r\n              return (\r\n                <React.Fragment key={i}>\r\n                  {group?.products.map(item => {\r\n                    return item.type === 'variation' &&\r\n                      Object.keys(item.new_variation_addons).length > 0 ? (\r\n                      <VariantCategoryProductItem\r\n                        key={item.id}\r\n                        setCartMenuOpen={setCartMenuOpen}\r\n                        item={item}\r\n                      />\r\n                    ) : (\r\n                      <CategoryProductItem\r\n                        key={item.id}\r\n                        setCartMenuOpen={setCartMenuOpen}\r\n                        item={item}\r\n                      />\r\n                    );\r\n                  })}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </div>\r\n        </AnimatePresence>\r\n      </div>\r\n      {data && hasNextPage && (\r\n        <div className=\"flex my-2 justify-center\">\r\n          <button\r\n            className=\"p-2 w-40 text-lg font-semibold flex items-center justify-center rounded bg-main-color text-main-text\"\r\n            onClick={() => {\r\n              fetchNextPage();\r\n            }}\r\n          >\r\n            {isFetchingNextPage ? (\r\n              <Loader\r\n                type=\"ThreeDots\"\r\n                color=\"#fff\"\r\n                height={27}\r\n                width={27}\r\n                visible={true}\r\n              />\r\n            ) : (\r\n              formatMessage({ id: 'show-more' })\r\n            )}\r\n          </button>\r\n        </div>\r\n      )}\r\n      <AnimatePresence>\r\n        {checkShowCondition() && <MobileCartPopup />}\r\n      </AnimatePresence>\r\n    </Layout>\r\n  );\r\n}\r\n"],"sourceRoot":""}