{"version":3,"sources":["pages/ResetPassword.js"],"names":["options","value","label","PhoneNumberCustomInput","name","countryCode","setCountryCode","props","useField","field","meta","className","htmlFor","style","display","gridTemplateColumns","gap","isSearchable","onChange","styles","dropdownIndicator","provided","padding","valueContainer","onBlur","e","error","touched","height","ResetPassword","settings","React","useContext","DataProvider","useState","isTabletOrAbove","useMediaQuery","query","useIntl","formatMessage","locale","errorOpen","setErrorOpen","success","setSuccess","errorMessage","setErrorMessage","history","useHistory","token","useParams","validationSchema","Yup","newPassword","required","id","min","max","phoneNumber","matches","message","closeFunction","to","src","store_logo","alt","width","initialValues","onSubmit","values","actions","a","resetUserPassword","setSubmitting","response","data","setErrors","handleSubmit","isSubmitting","CustomTextInput","password","type","disabled","color","visible","div","initial","opacity","animate","exit","link","word","onClick","goBack"],"mappings":"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","file":"static/js/28.862fc418.chunk.js","sourcesContent":["import { Formik, useField } from 'formik';\r\nimport React from 'react';\r\n\r\nimport { AiOutlineArrowLeft } from 'react-icons/ai';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nimport Select from 'react-select';\r\nimport * as Yup from 'yup';\r\nimport ErrorSnackbar from '../components/ErrorSnackbar';\r\nimport Language from '../components/NavbarComponents/Language';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { DataProvider } from '../contexts/DataContext';\r\nimport { resetUserPassword } from '../Queries/Queries';\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nconst options = [\r\n  { value: '+965', label: '+965' },\r\n  { value: '+966', label: '+966' },\r\n];\r\nconst PhoneNumberCustomInput = ({\r\n  label,\r\n  value,\r\n  name,\r\n  countryCode,\r\n  setCountryCode,\r\n  ...props\r\n}) => {\r\n  const [field, meta] = useField(name);\r\n  return (\r\n    <div className=\"w-full mb-2 flex flex-col \">\r\n      <label\r\n        htmlFor={name}\r\n        className={`text-sm font-semibold text-gray-800 mb-1`}\r\n      >\r\n        {label}\r\n      </label>\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: '0.5fr 1fr',\r\n          gap: '0.5rem',\r\n        }}\r\n      >\r\n        <Select\r\n          options={options}\r\n          isSearchable={false}\r\n          value={countryCode}\r\n          onChange={setCountryCode}\r\n          styles={{\r\n            dropdownIndicator: provided => {\r\n              return {\r\n                ...provided,\r\n                padding: '0.25rem',\r\n              };\r\n            },\r\n            valueContainer: provided => {\r\n              return {\r\n                ...provided,\r\n                padding: '0.5rem',\r\n              };\r\n            },\r\n          }}\r\n        />\r\n\r\n        <input\r\n          {...field}\r\n          {...props}\r\n          onBlur={e => {\r\n            field.onBlur(e);\r\n          }}\r\n          className={` border rounded w-full p-2 ${\r\n            meta.error && 'border-main-color'\r\n          }`}\r\n        />\r\n      </div>\r\n      {meta.touched && meta.error ? (\r\n        <h1 className=\"text-xs text-main-color mt-1\">{meta.error}</h1>\r\n      ) : (\r\n        <h1 className=\"text-xs text-main-color mt-1\" style={{ height: '18px' }}>\r\n          {' '}\r\n        </h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function ResetPassword() {\r\n  const { settings } = React.useContext(DataProvider);\r\n  const [countryCode, setCountryCode] = React.useState(options[0]);\r\n  const isTabletOrAbove = useMediaQuery({ query: '(min-width: 768px)' });\r\n  const { formatMessage, locale } = useIntl();\r\n  const [errorOpen, setErrorOpen] = React.useState(false);\r\n  const [success, setSuccess] = React.useState(false);\r\n  const [errorMessage, setErrorMessage] = React.useState('');\r\n  const history = useHistory();\r\n  const { token } = useParams();\r\n  const closeError = () => {\r\n    setErrorOpen(false);\r\n  };\r\n  const validationSchema = Yup.object({\r\n    newPassword: Yup.string()\r\n      .required(formatMessage({ id: 'password-empty' }))\r\n      .min(6, formatMessage({ id: 'password-min-6' }))\r\n      .max(15, formatMessage({ id: 'password-max-15' })),\r\n    phoneNumber: Yup.string()\r\n      .matches(/^\\d+$/, formatMessage({ id: 'number-only' }))\r\n      .required(formatMessage({ id: 'phone-empty' })),\r\n  });\r\n  return (\r\n    <div className=\" text-gray-900 px-2 flex justify-center items-center    h-screen relative\">\r\n      {errorOpen && (\r\n        <ErrorSnackbar message={errorMessage} closeFunction={closeError} />\r\n      )}\r\n      <div className=\" relative z-2  max-w-screen-sm \">\r\n        <div className=\"flex items-center flex-col mb-4  rounded-lg text-center \">\r\n          <Link to=\"/\">\r\n            <img\r\n              src={settings?.store_logo}\r\n              alt=\"logo\"\r\n              className=\" mb-3\"\r\n              style={{ width: '100px', height: '50px' }}\r\n            />\r\n          </Link>\r\n          <h2 className=\"text-xl mb-2 text-center font-semibold\">\r\n            {formatMessage({ id: 'set-up-new-password' })}\r\n          </h2>\r\n          <h1>{formatMessage({ id: 'password-reset-enter-new-password' })}</h1>\r\n        </div>\r\n        <div className=\"rounded-lg border bg-gray-100 mb-2\">\r\n          <Formik\r\n            initialValues={{\r\n              phoneNumber: '',\r\n              newPassword: '',\r\n            }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions) => {\r\n              setErrorOpen(false);\r\n              try {\r\n                const res = await resetUserPassword({\r\n                  phoneNumber: `${countryCode.value}${values.phoneNumber}`,\r\n                  token,\r\n                  newPassword: values.newPassword,\r\n                });\r\n                if (\r\n                  res.message === 'your password has been successfully changed'\r\n                ) {\r\n                  setSuccess(true);\r\n                } else {\r\n                  actions.setSubmitting(false);\r\n                }\r\n              } catch (error) {\r\n                if (\r\n                  error.response.data.message ===\r\n                  'Cannot find a user with this mobile'\r\n                ) {\r\n                  actions.setErrors({\r\n                    phoneNumber: formatMessage({ id: 'invalid-phone' }),\r\n                  });\r\n                } else {\r\n                  setErrorOpen(true);\r\n                  setErrorMessage('Something went wrong, Please try again');\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {({ handleSubmit, values, isSubmitting }) => {\r\n              return (\r\n                <form className=\"px-3 py-2\" onSubmit={handleSubmit}>\r\n                  <PhoneNumberCustomInput\r\n                    label={formatMessage({ id: 'phone-label' })}\r\n                    name=\"phoneNumber\"\r\n                    value={values.phoneNumber}\r\n                    countryCode={countryCode}\r\n                    setCountryCode={setCountryCode}\r\n                  />\r\n                  <CustomTextInput\r\n                    label={formatMessage({ id: 'new-password-label' })}\r\n                    name=\"newPassword\"\r\n                    value={values.password}\r\n                    type=\"password\"\r\n                  />\r\n\r\n                  <div className=\" py-1 mt-2\">\r\n                    <button\r\n                      disabled={isSubmitting}\r\n                      type=\"submit\"\r\n                      className={`${\r\n                        isSubmitting\r\n                          ? 'bg-main-color cursor-not-allowed'\r\n                          : 'bg-main-color text-second-nav-text-light hover:bg-red-800'\r\n                      } w-full rounded uppercase  flex items-center justify-center p-2 font-semibold  transition duration-150 `}\r\n                    >\r\n                      <Loader\r\n                        type=\"ThreeDots\"\r\n                        color=\"#fff\"\r\n                        height={25}\r\n                        width={25}\r\n                        visible={isSubmitting}\r\n                      />\r\n                      {!isSubmitting && formatMessage({ id: 'submit' })}\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n        <AnimatePresence>\r\n          {success && (\r\n            <motion.div\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n              className=\"px-3 py-2  mx-auto top-100 text-center w-full  text-sm absolute text-main-text rounded font-semibold bg-green-700\"\r\n            >\r\n              <p>\r\n                <FormattedMessage\r\n                  id=\"password-reset-success\"\r\n                  values={{\r\n                    link: word => (\r\n                      <Link\r\n                        to={`/${locale}/app/login`}\r\n                        className=\"text-green-700 hover:underline\"\r\n                      >\r\n                        {word}\r\n                      </Link>\r\n                    ),\r\n                  }}\r\n                />\r\n              </p>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      </div>\r\n      <div\r\n        className={`${\r\n          isTabletOrAbove\r\n            ? 'credentials-language__container'\r\n            : 'credentials-language__container-mobile'\r\n        }`}\r\n      >\r\n        <Language />\r\n      </div>\r\n      <div\r\n        className={`${\r\n          isTabletOrAbove\r\n            ? 'credentials-back-button__container'\r\n            : 'credentials-back-button__container-mobile'\r\n        }`}\r\n      >\r\n        <button onClick={() => history.goBack()}>\r\n          <AiOutlineArrowLeft className=\"w-6 h-6\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst CustomTextInput = ({ label, value, name, ...props }) => {\r\n  const [field, meta] = useField(name);\r\n  return (\r\n    <div className=\"w-full relative mb-2 flex flex-col\">\r\n      <label\r\n        htmlFor={name}\r\n        className={` text-sm font-semibold text-gray-800 mb-1 `}\r\n      >\r\n        {label}\r\n      </label>\r\n      <input\r\n        {...field}\r\n        {...props}\r\n        onBlur={e => {\r\n          field.onBlur(e);\r\n        }}\r\n        className={`${\r\n          meta.error && meta.touched && 'border-main-color'\r\n        } w-full rounded-lg border  p-2`}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <h1 className=\"text-xs text-main-color mt-1\">{meta.error}</h1>\r\n      ) : (\r\n        <h1 className=\"text-xs text-main-color mt-1\" style={{ height: '18px' }}>\r\n          {' '}\r\n        </h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}